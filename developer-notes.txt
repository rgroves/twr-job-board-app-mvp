These are my notes as I walk through this tutorial: https://youtu.be/lauywdXKEXI

0:03:10

- I need to familiarize myself more with Material UI
  - see: https://material-ui.com/

- The tutorial uses @material-ui/core@next. I wasn't sure what the @ signs in
  the pacakge name were for.

  - The leading @ signifies a scope (e.g. @material-ui/). Scopes are a way of
    grouping related packages together, and also affect a few things about the
    way npm treats the package.

    see: https://docs.npmjs.com/using-npm/scope.html

  - The npm package page states "Please note that @next will only point to 
    pre-releases; to get the latest stable releaseuse @latest instead."

  - "next" is just a tag. On the npm registry page for the package, in the
    versions tab you can see the tags that are set to "next" and "latest" for
    that package.
      
      see: https://stackoverflow.com/questions/40621566/what-package-version-does-next-specify-for-npm/40643555

0:04:55

- Regarding app design:
  - Want App.js just to hold state, so making separate components: 
    - Jobs.js will hold component tree and render styling
    - Job.js will hold application state, use state, and call hooks

0:09:58

- My styling of the job list was different than in the tutorial.

  - There seemed to be a box shadow around the entries in the tutorialâ€”
    I'm chalking that up to a difference in the Typography library (?)

  - The title and company were right up against one another (e.g. "SWE 1Google")

  - I added span tags around the title and company which got my list to look
    similar to the tutorial's list.

0:13:30

- TODO: Explore capabilities of cron package.
  see: https://www.npmjs.com/package/cron

- USEFUL: https://crontab.guru/

0:25:50

- TODO: Clearly there is some error handling needed in fetch-github.js
  - see video at time code noted above.

- I found the onPage initialization to 0 to cause duplicates, needs to be onPage = 1
  - I tweeted about that here: https://twitter.com/RobertGroves/status/1240473480971407365

0:28:39

- TODO: Explore Redis. I know Redis is an in-memory key-value data store, but
  have never used it.

  - For installing Redis on WSL Ubuntu 18.04 I used:
    https://tecadmin.net/install-redis-ubuntu/

    - To start the server under WSL I had to use: sudo service redis-server start
      see: https://stackoverflow.com/questions/52197246/system-has-not-been-booted-with-systemd-as-init-system-pid-1-cant-operate

0:38:45

- Noticed that when fetch-github.js is run the process does not end.

  - After some experimenting, I found this is due to the redis client still
    being connected.

    - Must explicitly close the redis client connection with: client.quit()

0:48:34

- My test run of the api server was getting an error that port 3001 was in use.

  - I used this command in an elevated PowerShell console to see what process
    was using port 3001:

    netstat -bano | select-string '3001'

    That only gave me the PID though, I had to use this to find the process name:

    tasklist /FI "PID eq 4400" /FO TABLE

    And the culprit was Visual Studio Code using the Remote WSL extension (I am
    using WSL to host my Ubuntu instance where I'm codig this).

0:55:05

- TODO: Need to familiarize myself with React.useEffect and React.useState.
